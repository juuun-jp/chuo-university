// breakpoint
@mixin mq($breakpoint: md) {
  @media #{map-get($breakpoints, $breakpoint)} {
    @content;
  }
}

// フォント種類：bangers
@mixin bangers($size: font(md), $letterSpacing: 1px, $weight: bold) {
  font-family: 'Bangers', cursive;
  font-size: $size;
  letter-spacing: $letterSpacing;
  font-weight: $weight;
}

// flexレイアウト
@mixin flex($flow: row nowrap, $justify-content: flex-start, $align-items: stretch) {
  display: flex;
  flex-flow: $flow;
  justify-content: $justify-content;
  align-items: $align-items;
}

// グラデーション
@mixin gradient($start-color: #091e2f, $end-color: #030A10, $orientation: default){
  background: $start-color;
  // 垂直グラデーションの場合
  @if $orientation == vertical{
    background: -moz-linear-gradient(top,  $start-color 0%, $end-color 100%);
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$start-color), color-stop(100%,$end-color));
    background: -webkit-linear-gradient(top,  $start-color 0%,$end-color 100%);
    background: -o-linear-gradient(top,  $start-color 0%,$end-color 100%);
    background: linear-gradient(to bottom,  $start-color 0%,$end-color 100%);
  }
  // 水平グラデーションの場合
  @else if $orientation == horizontal{
    background: -moz-linear-gradient(left,  $start-color 0%, $end-color 100%);
    background: -webkit-gradient(linear, left top, right top, color-stop(0%,$start-color), color-stop(100%,$end-color));
    background: -webkit-linear-gradient(left,  $start-color 0%,$end-color 100%);
    background: -o-linear-gradient(left,  $start-color 0%,$end-color 100%);
    background: linear-gradient(to right,  $start-color 0%,$end-color 100%);
  }
  @else{
    background: -moz-radial-gradient(center, ellipse cover,  $start-color 0%, $end-color 100%);
    background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%,$start-color), color-stop(100%,$end-color));
    background: -webkit-radial-gradient(center, ellipse cover,  $start-color 0%,$end-color 100%);
    background: -o-radial-gradient(center, ellipse cover,  $start-color 0%,$end-color 100%);
    background: radial-gradient(ellipse at center,  $start-color 0%,$end-color 100%);
  }
}

// 円形コンテンツのボーダーグラデーション
@mixin border-gradient($w: 9, $h: 9, $c: white, $start-color: #0179D5, $end-color: #091E2F, $direction: vertical) {
  width: interval($w);
  height: interval($h);
  border-radius: radius(circle);
  background-color: color($c);
  position: relative;
  @include flex(row nowrap, center, center);

  &::before {
    content: '';
    display: block;
    width: 110%;
    height: 110%;
    border-radius: radius(circle);
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: -2;
    @include gradient($start-color, $end-color, $direction);
  }
}

// プライマリーボタンのホバーアニメーション
@mixin button-hover() {
  border: none;

  .primary-btn__btn {
    transform: none;
    border: none;
    background-color: color(orange);
    color: color(white);
  }
}

// ヘッダーボタンのホバーアニメーション
@mixin header-button-hover($width: 40px, $height: 40px, $time: .5s) {
  &::before {
    position: absolute;
    content: '';
    width: $width;
    height: $height;
    border-radius: 50%;
    border: 2px solid transparent;
    transition: $time all ease-in-out;
  }

  &:hover {
    background-color: color(white);
    color: color(darkblue);
    transform: scale(1.1);

    &::before {
      border-color: color(darkblue);
    }

    .header-icon {
      transform: rotateZ(360deg);
    }
  }
}
/**
 * テキストの前に線を入れる装飾 (- text)
 * 親要素に position: relative; と padding-left をつける
 */
@mixin middle-line-text($width, $height, $bg-color) {
  padding-left: interval($width + 1);

  &::before {
    display: block;
    content: '';
    width: interval($width);
    height: $height;
    background-color: $bg-color;
    position: absolute;
    top: 50%;
    left: 0;
    transform: translateY(-50%);
  }
}

// cssで背景指定（background-image）
@mixin background-image($url, $position, $size: cover) {
  background-image: url($url);
  background-repeat: no-repeat;
  background-position: $position;
  background-size: $size;
}

// image画像の縁を斜線で囲むレイアウト （多分使わないけど一旦保存しとく）
@mixin imageFlame {
  position: relative;

  &::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: calc(100% + 1px);
    height: calc(100% + 1px);
    border-image-source: repeating-linear-gradient(45deg, color(white), color(white) 3px, color(darkblue) 0, color(darkblue) 6px);
    border-image-slice: 10;
    border-image-repeat: round;
    border-style: solid;
    border-width: 10px;
  }
}

// テニスボール
@mixin ball {
  width: 160px;
  height: 160px;
  background: linear-gradient(0deg, darken(#fff, 60%), darken(#fff, 10%), #fff);
  border-radius: radius(circle);
  position: relative;

  &::before {
    display: block;
    content: '';
    position: absolute;
    top: 40px;
    left: 50%;
    transform: translateX(-50%);
    width: 6px;
    height: 6px;
    background-color: darken($color: blue, $amount: 10%);
    border-radius: radius(circle);
  }

  &::after {
    display: block;
    content: 'CHUO UNIVERSITY';
    color: darken($color: red, $amount: .4);
    font-weight: bold;
    font-size: font(sm);
    text-align: center;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
}

// image トリミング (imgタグの一つ親のタグに指定する)
@mixin trimming($aspect) {
  position: relative;

  &::before {
    content: '';
    display: block;
    padding-bottom: $aspect;
  }

  & > img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
}

@mixin historyAgeTag($content: '時代', $position: top) {
  &::after {
    display: block;
    content: $content;
    padding: 0 interval(2);
    border-radius: 30px;
    background-color: color(darkblue);
    color: color(white);
    text-align: center;
    line-height: 2;
    font-weight: bold;
    letter-spacing: 2px;

    @if $position == top {
      position: absolute;
      top: interval(2);
      left: 8%;
      transform: translateX(-42%);
    }

    @if $position == mid {
      position: absolute;
      top: 50%;
      left: 8%;
      transform: translate(-42%, -50%);
    }

    @if $position == bottom {
      position: absolute;
      bottom: interval(1);
      left: 8%;
      transform: translateX(-42%);
    }

  }
}
